# Keybindings

#: For a list of key names, see: GLFW keys <http://www.glfw.org/docs/latest/group__keys.html>. The name to use
#: is the part after the GLFW_KEY_ prefix. For a list of modifier names, see: GLFW mods
#: <http://www.glfw.org/docs/latest/group__mods.html>

#: On Linux you can also use XKB key names to bind keys that are not
#: supported by GLFW. See XKB keys
#: <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-
#: keysyms.h> for a list of key names. The name to use is the part
#: after the XKB_KEY_ prefix. Note that you should only use an XKB key
#: name for keys that are not present in the list of GLFW keys.

#: Finally, you can use raw system key codes to map keys. To see the
#: system key code for a key, start kitty with the kitty --debug-
#: keyboard option. Then kitty will output some debug text for every
#: key event. In that text look for ``native_code`` the value of that
#: becomes the key name in the shortcut. For example:

# Disable all built-in keybindings:
# clear_all_shortcuts yes

# Kitty
map ctrl+a>f load_config_file
map ctrl+a>: kitty_shell

# Kittens
map ctrl+a>? kitten hints
map ctrl+a>u kitten unicode_input

# copy paste
map ctrl+shift+c copy_to_clipboard
map ctrl+shift+v paste_from_clipboard
map meta+c copy_to_clipboard
map meta+v paste_from_clipboard
# TODO: copy from selection <3<3

# OS window control
map ctrl+shift+n  new_os_window

# Layout management
# map ctrl+a>n next_layout
# map ctrl+a>p last_used_layout
# map ctrl+a>z goto_layout stack

# layout: splits (tmux-like full-control)
map ctrl+a>minus launch --location=hsplit
map ctrl+a>shift+\\ launch --location=vsplit
map ctrl+a>h launch --location=hsplit
map ctrl+a>v launch --location=vsplit




# Tab control
map ctrl+a>space        next_tab
map ctrl+a>backspace    previous_tab
map ctrl+a>c            new_tab
map ctrl+a>k            close_tab
map ctrl+a>shift+k      close_window
map ctrl+a>shift+a      set_tab_title
map ctrl+a>1            goto_tab 1
map ctrl+a>2            goto_tab 2
map ctrl+a>3            goto_tab 3
map ctrl+a>4            goto_tab 4
map ctrl+a>5            goto_tab 5
map ctrl+a>6            goto_tab 6
map ctrl+a>7            goto_tab 7
map ctrl+a>8            goto_tab 8
map ctrl+a>9            goto_tab 9
map ctrl+a>0            goto_tab 10
# Experimental:
map ctrl+a>ctrl+a       goto_tab -1

# Window control
# ctrl+a>|
# map ctrl+a>shift+0x5c new_window
# map ctrl+a>shift+\\ combine : new_window : next_window
# map ctrl+a>v  combine : new_window : next_window
# # map ctrl+a>-  combine : new_window : next_window
map ctrl+a>o next_window
map ctrl+a>O previous_window

map ctrl+a>r start_resizing_window
map ctrl+a>left resize_window narrower
map ctrl+a>right resize_window wider
map ctrl+a>up resize_window taller
map ctrl+a>down resize_window shorter


# Font size
map ctrl+shift+equal change_font_size current +1.0
map ctrl+shift+minus change_font_size current -1.0
map ctrl+a>equal change_font_size current 18.0

# Vim navigation
map ctrl+j kitten pass_keys.py bottom ctrl+j
map ctrl+k kitten pass_keys.py top    ctrl+k
map ctrl+h kitten pass_keys.py left   ctrl+h
map ctrl+l kitten pass_keys.py right  ctrl+l

# buffer scrolling
map ctrl+a>page_up    scroll_page_up
map ctrl+a>page_down  scroll_page_down
map ctrl+a>l show_scrollback
map ctrl+a>L pipe @ansi overlay less +G -R

map ctrl+a>d detach_window new-tab

